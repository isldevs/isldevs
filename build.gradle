plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.graalvm.buildtools.native' version '0.10.5'
    id "org.flywaydb.flyway" version "9.22.3"
    id "com.github.hierynomus.license" version "0.16.1"
}

group = 'com.base'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-cas'
    implementation 'org.springframework.security:spring-security-oauth2-authorization-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.flywaydb:flyway-core:9.22.3'
    implementation 'io.github.cdimascio:dotenv-java:3.2.0'
    implementation 'com.nimbusds:nimbus-jose-jwt:10.0.2'

    runtimeOnly 'org.postgresql:postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def env = new Properties()
def activeProfile = findProperty("spring.profiles.active") ?: "dev"
def envFile = file("src/main/resources/config/.${activeProfile}")

if (envFile.exists()) {
    envFile.withInputStream { env.load(it) }
    println "Loaded .${activeProfile} from: ${envFile}"
} else {
    println "No .${activeProfile} file found for profile: ${activeProfile}"
}

bootRun {
    environment env
}

flyway {
    url = env.getProperty("DB_URL")
    user = env.getProperty("DB_USERNAME")
    password = env.getProperty("DB_PASSWORD")
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
}

sourceSets {
    main {
        output.resourcesDir = file("$buildDir/classes/java/main")
    }
    test {
        output.resourcesDir = file("$buildDir/classes/java/test")
    }
    if (findProperty("spring.profiles.active") != "dev") {
        main.java.exclude('**/TomcatSSLConfig.java')
        test.java.exclude('**/test/**')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
            '-parameters',
            '-Xlint:-unchecked',
            '-Xlint:-deprecation'
    ]
}

license {
    header = rootProject.file('LICENSE_HEADER')
    strictCheck = true
    skipExistingHeaders = true
    excludes([
            '**/build/**',
            '**/generated/**',
            '**/target/**',
            '**/out/**',
            '**/bin/**',
            '**/aot*/**',
            '**/*__Generated.java',
            '**/org/springframework/**',
            '**/*.properties',
            '**/*.yml',
            '**/*.yaml',
            '**/*.json',
            '**/*.xml',
            '**/*.sql',
            '**/*.p12',
            '**/*.jks',
            '**/*.keystore',
            '**/*.sh',
            '**/*.bat',
            '**/*.jar',
            '**/*.war',
            '**/*.md',
            '**/*.txt',
            '**/*.html',
            '**/gradlew*',
            '**/gradle/wrapper/**',
            '**/*Tests.java',
            '**/*Test.java'
    ])
}

tasks.named('licenseMain') {
    mustRunAfter tasks.named('compileAotJava')
}

tasks.named('licenseTest') {
    mustRunAfter tasks.named('compileAotJava')
}

licenseFormatTest {
    dependsOn 'generateTestClasses'
}

tasks.named('licenseAot') {
    enabled = false
    exclude '**/.dev'
    exclude '**/.prod'
    exclude '**/.env'
    exclude '**/aot*/**'
    exclude '**/*__Generated.java'
    exclude '**/org/springframework/**'
}

tasks.named('licenseAotTest') {
    enabled = false
    exclude '**/aot*/**'
    exclude '**/.dev'
    exclude '**/.prod'
    exclude '**/.env'
    exclude '**/*__Generated.java'
    exclude '**/org/springframework/**'
}

licenseTest {
    dependsOn 'generateTestClasses'
}

processTestAot {
    logging.captureStandardOutput(LogLevel.ERROR)
}

processAot {
    enabled = false
}

tasks.named('processResources') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register('generateTestClasses') {
    group = 'Verification'
    description = 'Generates test class scaffolds'

    inputs.dir(layout.projectDirectory.dir('src/main/java'))
    outputs.dir(layout.projectDirectory.dir('src/test/java'))

    doLast {
        def mainJavaDir = file('src/main/java')

        fileTree(mainJavaDir).matching {
            include '**/*.java'
            exclude '**/*Test.java', '**/*Tests.java', '**/package-info.java', '**/*Application.java'
        }.each { sourceFile ->
            def testFile = file(sourceFile.path
                    .replace('main/java', 'test/java')
                    .replace('.java', 'Tests.java'))

            if (!testFile.exists()) {
                testFile.parentFile.mkdirs()

                // Correct package name calculation
                def packageName = mainJavaDir.toPath()
                        .relativize(sourceFile.parentFile.toPath())
                        .toString()
                        .replace(File.separator, '.')

                testFile.text = """\
                    |package ${packageName};
                    |
                    |import org.junit.jupiter.api.Test;
                    |import static org.junit.jupiter.api.Assertions.*;
                    |
                    |class ${sourceFile.name.replace('.java', '')}Tests {
                    |
                    |    @Test
                    |    void contextLoads() {
                    |    }
                    |}
                    |""".stripMargin()
            }
        }
    }
}

compileTestJava {
    dependsOn(tasks.named('generateTestClasses'))
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '-Xlint:-unchecked',
            '-Xlint:-deprecation',
            '-Xlint:-processing'
    ]
    options.encoding = 'UTF-8'
}

bootWar {
    archiveClassifier = 'boot'
    archiveFileName = "${project.name}.war"
}

bootJar {
    archiveFileName = "${project.name}.jar"
    launchScript()
}

tasks.named('assemble') {
    dependsOn bootWar, bootJar
}

war {
    enabled = true
    archiveClassifier = ''
    classpath = classpath.filter { file ->
        !file.name.contains('spring-boot-starter-tomcat') &&
                !file.name.contains('spring-boot-starter-jetty') &&
                !file.name.contains('spring-boot-starter-undertow')
    }
}

tasks.named('compileJava', JavaCompile).configure {
    options.fork = true
    options.forkOptions.jvmArgs.addAll(['-Duser.language=en', '-Duser.country=US'])
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.named('test', Test) {
    useJUnitPlatform()
    dependsOn(tasks.named('generateTestClasses'))
    if (project.hasProperty('skipIntegrationTests') && Boolean.parseBoolean(project.property('skipIntegrationTests'))) {
        exclude('**/test/**')
    }
}