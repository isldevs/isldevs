name: ISLDevs CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # -----------------
  # Build & Test (CI)
  # -----------------
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      jar-path: build/libs/*.jar

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
          gradle-version: 8.13
          build-scan-publish: 'true'

      - name: Clean Gradle cache
        run: ./gradlew clean --gradle-user-home=$GITHUB_WORKSPACE/.gradle

      - name: Build with Gradle Wrapper
        run: ./gradlew build -PskipIntegrationTests=true

      - name: Upload JAR artifact@v4
        uses: actions/upload-artifact@v4
        with:
          name: isldevs-app
          path: build/libs/*.jar

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  # -----------
  # Deploy (CD)
  # -----------
  #deploy:
  #  runs-on: ubuntu-latest
  #  needs: build

  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4

  #    - name: Download JAR artifact
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: isldevs-app
  #        path: app/

      # --------------------------------------------------------
      # Option1: Using Docker image and pull into Server via SSH
      # --------------------------------------------------------
      #- name: Log in to Docker Hub
      #  uses: docker/login-action@v3
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}

      #- name: Build and push Docker image
      #  run: |
      #    docker build -t ${{ secrets.DOCKER_USERNAME }}/isldevs-app:latest .
      #    docker push ${{ secrets.DOCKER_USERNAME }}/isldevs-app:latest

      #- name: Deploy to server
      #  uses: appleboy/ssh-action@v1.2.0
      #  with:
      #    host: ${{ secrets.SERVER_HOST }}
      #    username: ${{ secrets.SERVER_USER }}
      #    key: ${{ secrets.SERVER_SSH_KEY }}
      #    script: |
      #      cd /app/isldevs
      #      docker pull ${{ secrets.DOCKER_USERNAME }}/isldevs-app:latest
      #      docker stop isldevs || true
      #      docker rm isldevs || true
      #      docker run -d --name isldevs -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/isldevs-app:latest

      # -----------------------------------
      # Option2: Deploy into Server via SSH
      # -----------------------------------
      #- name: Deploy to server via SSH
      #  uses: appleboy/ssh-action@v1.2.0
      #  with:
      #    host: ${{ secrets.SERVER_HOST }}
      #    username: ${{ secrets.SERVER_USER }}
      #    key: ${{ secrets.SERVER_SSH_KEY }}
      #    script: |
      #      cd ~/isldevs-app
      #      # stop previous process if running
      #      pkill -f 'java -jar isldevs.jar' || true
      #      # copy new JAR
      #      cp /tmp/github/workspace/app/*.jar ~/isldevs-app/isldevs.jar
      #      # start new JAR in background
      #      nohup java -jar isldevs.jar > app.log 2>&1