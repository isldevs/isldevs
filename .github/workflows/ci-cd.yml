name: ISLDevs CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # -----------------
  # Build & Test (CI)
  # -----------------
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      jar-path: build/libs/*.jar

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
          gradle-version: 8.13
          build-scan-publish: 'true'

      - name: Clean Gradle cache
        run: ./gradlew clean --gradle-user-home=$GITHUB_WORKSPACE/.gradle

      - name: Build with Gradle Wrapper
        run: ./gradlew build -PskipIntegrationTests=true

      - name: Upload JAR artifact@v4
        uses: actions/upload-artifact@v4
        with:
          name: isldevs-app
          path: build/libs/*.jar

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  # -----------
  # Deploy (CD)
  # -----------
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: isldevs-app
          path: app/

      # ---------------------------------------
      # Option1: Deploy JAR into Server via SSH
      # ---------------------------------------
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          debug: true
          script: |
            cd ~/isldevs-app

            # Stop previous Java process if running
            pkill -f 'java -jar isldevs.jar' || true

            # Copy the new JAR from GitHub Actions workspace
            # Use relative path to downloaded artifact
            cp ~/app/*.jar ~/isldevs-app/isldevs.jar

            # Start new JAR in background with nohup
            nohup java -jar isldevs.jar --spring.config.location=classpath:/config/.prod > app.log 2>&1 &

            # Give the application a few seconds to start
            sleep 10

            # Check if the application is running
            if pgrep -f 'java -jar isldevs.jar'; then
              echo "Deployment finished successfully."
              exit 0
            else
              echo "Deployment failed: Java process not found."
              exit 1
            fi

            # Optional: confirm Java 21 is being used
            java -version

            echo "Deployment finished successfully."
